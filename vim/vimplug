" vim: filetype=vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Plug: A minimalist Vim plugin manager.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
" no nead for nvim
if !has('nvim')
    Plug 'tpope/vim-sensible'
endif
Plug 'terryma/vim-smooth-scroll'
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>
Plug 'mattn/emmet-vim'
Plug 'mattn/vim-prompter'
Plug 'mattn/vim-fixedsearch'
nmap \ <plug>(fixedsearch)
Plug 'mattn/vim-xxdcursor'
Plug 'tmux-plugins/vim-tmux'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-function'
Plug 'sgur/vim-textobj-parameter'
Plug 'kana/vim-textobj-entire'
Plug 'glts/vim-textobj-comment'
Plug 'kana/vim-textobj-indent'
Plug 'mattn/vim-textobj-url'
Plug 'wakatime/vim-wakatime'
Plug 'lilydjwg/fcitx.vim'
"Plug 'reedes/vim-pencil'
Plug 'morhetz/gruvbox'
let g:gruvbox_italic=1
Plug 'vim-airline/vim-airline'
let g:airline_theme='gruvbox'
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1
Plug 'vim-scripts/taglist.vim'
let Tlist_Exit_OnlyWindow=1
let Tlist_Auto_Open=0
nmap <leader>tl :TlistToggle<CR>
Plug 'scrooloose/nerdtree'
nmap <leader>nt :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'jiangmiao/auto-pairs'
Plug 'mbbill/undotree'
Plug 'mhinz/vim-signify'
Plug 'osyo-manga/vim-over'
Plug 'terryma/vim-expand-region'
map + <Plug>(expand_region_expand)
map - <Plug>(expand_region_shrink)
Plug 'ntpeters/vim-better-whitespace'
nnoremap <leader>sw :StripWhitespace<CR>
Plug 'tpope/vim-fugitive'
Plug 'octol/vim-cpp-enhanced-highlight', {'for': 'cpp'}
" TODO need lua, no nvim support
"Plug 'jeaye/color_coded' " C-family语法高亮
Plug 'scrooloose/nerdcommenter'
" For some reason, vim registers <C-/> as <C-_>
nnoremap <c-_> :call NERDComment(0, "toggle")<CR>
vnoremap <c-_> :call NERDComment(0, "toggle")<CR>
Plug 'tpope/vim-commentary'
Plug 'vim-scripts/matchit.zip'
Plug 'vim-scripts/a.vim'
nmap <leader>aa :A<CR>
nmap <leader>as :AS<CR>
Plug 'wfxr/BufferSwitch'
"Plug 'quickfix/quickfix'
Plug 'Valloric/ListToggle'
let g:lt_height = 10
let g:lt_location_list_toggle_map = '<leader>1'
let g:lt_quickfix_list_toggle_map = '<leader>2'
Plug 'godlygeek/tabular'
Plug 'skammer/vim-css-color', {'for': 'css'}
Plug 'pangloss/vim-javascript', {'for': 'javascript'}
Plug 'moll/vim-node'
"Plug 'suan/vim-instant-markdown', { 'for': 'markdown' }
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
"let g:vim_markdown_conceal = 0     "取消隐藏代码段语言标记
Plug 'Yggdroot/indentLine'
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#4E4E4E'
map <leader>il :IndentLinesToggle<CR>
"Plug 'takac/vim-hardtime'
"let g:hardtime_default_on = 0
Plug 'vim-utils/vim-husk' " 在vim的命令模式支持eamcs-bash风格的快捷键操作

Plug 'elzr/vim-json', { 'for': 'json' }

Plug 'guns/vim-clojure-static',      { 'for': 'clojure' }
Plug 'luochen1990/rainbow',          { 'for': 'clojure' }
Plug 'tpope/vim-fireplace',          { 'for': 'clojure' }
Plug 'vim-scripts/paredit.vim',      { 'for': 'clojure' }
Plug 'venantius/vim-cljfmt',         { 'for': 'clojure' }

Plug 'zplug/vim-zplug'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

Plug 'sbdchd/neoformat'
" Run neoformat on save
"augroup fmt
"autocmd!
"autocmd BufWritePre * Neoformat
"augroup END
" Enable alignment
let g:neoformat_basic_format_align = 1
" Enable tab to spaces conversion
let g:neoformat_basic_format_retab = 1
" Enable trimmming of trailing whitespace
let g:neoformat_basic_format_trim = 1

Plug 'cespare/vim-toml', {'for': 'toml'}
Plug 'rust-lang/rust.vim', {'for': 'rust'}
let g:rustfmt_autosave = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ultisnips && Vim-Snippets
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
" Trigger configuration. Do not use <tab> if you use 'YouCompleteMe'
let g:UltiSnipsExpandTrigger="<leader><tab>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
" Additional snippets directory
"let g:UltiSnipsSnippetsDir="~/.UltiSnips"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="horizontal"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic: a syntax checking plugin for Vim that runs files through
" external syntax checkers and displays any resulting errors to the user.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'scrooloose/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs=1
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++14'
let g:syntastic_always_populate_loc_list = 1
if g:isWIN
    let g:syntastic_error_symbol = '×'
    let g:syntastic_warning_symbol = '»'
else
    let g:syntastic_error_symbol = '྾'
    let g:syntastic_warning_symbol = '⚠'
endif
" Default javac checker is too slow!
let g:syntastic_java_checkers=['checkstyle']

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YouCompleteMe
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'Valloric/YouCompleteMe' | Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
" 配置默认的ycm_extra_conf.py
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
" 打开vim时不再询问是否加载ycm_extra_conf.py配置
let g:ycm_confirm_extra_conf = 0
" 注释补全开关
let g:ycm_complete_in_comments = 1
" 字符串补全开关:关闭会导致在包含双引号形式的头文件时无法补全！
let g:ycm_complete_in_strings = 1
" 基于标签收集引擎
let g:ycm_collect_identifiers_from_tags_files = 1
" 基于注释和字符串的收集引擎
let g:ycm_collect_identifiers_from_comments_and_strings = 1
" 语言关键字补全
let g:ycm_seed_identifiers_with_syntax = 1
" 从第n个字符开始展开补全
let g:ycm_min_num_of_chars_for_completion = 1
" 添加UltiSnips进行snippet补全
let g:ycm_use_ultisnips_completer = 1
" 直接显示补全（全局类型、变量、宏或函数等补全需要
let g:ycm_key_invoke_completion = '<C-\>'
" 补全完成后关闭预览窗口
let g:ycm_autoclose_preview_window_after_completion = 1
" Disable completion previews with function prototypes, etc.
"set completeopt=menu
"let g:ycm_add_preview_tocompleteopt = 1
" 关闭js文件补全（需要js项目配置文件，类似C++，麻烦）
let g:ycm_filetype_specific_completion_to_disable = {'javascript': 1}
"nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>
map <leader>F :YcmCompleter FixIt<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Cursor move and incremental search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'easymotion/vim-easymotion'
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)
" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)
" Move to line
map <Leader>l <Plug>(easymotion-bd-jk)
nmap <Leader>l <Plug>(easymotion-overwin-line)
" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" bug in neovim
if !has('nvim')
    Plug 'haya14busa/incsearch.vim'
    "map /  <Plug>(incsearch-forward)
    "map ?  <Plug>(incsearch-backward)
    "map g/ <Plug>(incsearch-stay)
    "set hlsearch
    "let g:incsearch#auto_nohlsearch = 1
    "map n  <Plug>(incsearch-nohl-n)
    "map N  <Plug>(incsearch-nohl-N)
    "map *  <Plug>(incsearch-nohl-*)
    "map #  <Plug>(incsearch-nohl-#)
    "map g* <Plug>(incsearch-nohl-g*)
    "map g# <Plug>(incsearch-nohl-g#)
    Plug 'haya14busa/incsearch-easymotion.vim'
    map / <Plug>(incsearch-easymotion-/)
    map ? <Plug>(incsearch-easymotion-?)
    map g/ <Plug>(incsearch-easymotion-stay)
    Plug 'haya14busa/incsearch-fuzzy.vim'
    "map z/ <Plug>(incsearch-fuzzy-/)
    "map z? <Plug>(incsearch-fuzzy-?)
    "map zg/ <Plug>(incsearch-fuzzy-stay)
    " 带跳转标记的跨窗口模糊搜索
    function! s:config_easyfuzzymotion(...) abort
        return extend(copy({
                    \   'converters': [incsearch#config#fuzzyword#converter()],
                    \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
                    \   'keymap': {"\<CR>": '<Over>(easymotion)'},
                    \   'is_expr': 0,
                    \   'is_stay': 1
                    \ }), get(a:, 1, {}))
    endfunction
    noremap <silent><expr> <leader>/ incsearch#go(<SID>config_easyfuzzymotion())
endif

" Add plugins to &runtimepath
call plug#end()
