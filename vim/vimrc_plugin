""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Plug: A minimalist Vim plugin manager.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
" no nead for nvim
if !has('nvim')
    Plug 'tpope/vim-sensible'
endif
Plug 'terryma/vim-smooth-scroll'
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>
Plug 'mattn/emmet-vim'
Plug 'jez/vim-superman'
Plug 'tmux-plugins/vim-tmux'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-function'
Plug 'sgur/vim-textobj-parameter'
Plug 'kana/vim-textobj-entire'
Plug 'glts/vim-textobj-comment'
Plug 'kana/vim-textobj-indent'
Plug 'mattn/vim-textobj-url'
Plug 'reedes/vim-pencil'
Plug 'morhetz/gruvbox'
let g:gruvbox_italic=1
Plug 'vim-airline/vim-airline'
let g:airline_theme='gruvbox'
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1
Plug 'taglist.vim'
let Tlist_Exit_OnlyWindow=1
let Tlist_Auto_Open=0
Plug 'scrooloose/nerdtree'
nmap <leader>nt :NERDTreeToggle<CR>
nmap <leader>tl :TlistToggle<CR>
nmap <leader>tl :TlistToggle<CR>
nmap <leader>tl :TlistToggle<CR>
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'jiangmiao/auto-pairs'
Plug 'mbbill/undotree'
Plug 'mhinz/vim-signify'
Plug 'osyo-manga/vim-over'
Plug 'terryma/vim-expand-region'
map + <Plug>(expand_region_expand)
map - <Plug>(expand_region_shrink)
Plug 'ntpeters/vim-better-whitespace'
nnoremap <leader>sw :StripWhitespace<CR>
Plug 'tpope/vim-fugitive'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-commentary'
Plug 'vim-scripts/matchit.zip'
Plug 'a.vim'
nmap <leader>aa :A<CR>
nmap <leader>as :AS<CR>
Plug 'wfxr/BufferSwitch'
"Plug 'quickfix/quickfix'
Plug 'Valloric/ListToggle'
let g:lt_height = 10
let g:lt_location_list_toggle_map = '<leader>1'
let g:lt_quickfix_list_toggle_map = '<leader>2'
Plug 'godlygeek/tabular'
Plug 'skammer/vim-css-color'
Plug 'suan/vim-instant-markdown'
Plug 'pangloss/vim-javascript'
Plug 'moll/vim-node'
Plug 'plasticboy/vim-markdown'
"let g:vim_markdown_conceal = 0     "取消隐藏代码段语言标记
Plug 'Yggdroot/indentLine'
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#4E4E4E'
map <leader>il :IndentLinesToggle<CR>
Plug 'takac/vim-hardtime'
let g:hardtime_default_on = 0

Plug 'elzr/vim-json', { 'for': 'json' }

Plug 'guns/vim-clojure-static',      { 'for': 'clojure' }
Plug 'luochen1990/rainbow',          { 'for': 'clojure' }
Plug 'tpope/vim-fireplace',          { 'for': 'clojure' }
Plug 'vim-scripts/paredit.vim',      { 'for': 'clojure' }
Plug 'venantius/vim-cljfmt',         { 'for': 'clojure' }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Clang Format: format C, C++ and Objective-C code
" clang-format options can be set int ~/.clang-format file
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'rhysd/vim-clang-format'
" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc,java,js,ts nnoremap <buffer><leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc,java,js,ts vnoremap <buffer><leader>cf :ClangFormat<CR>
autocmd FileType c,cpp,objc,java,js,ts inoremap <buffer><leader>cf <Esc>:ClangFormat<CR>
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ultisnips && Vim-Snippets
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'SirVer/ultisnips'
" Trigger configuration. Do not use <tab> if you use 'YouCompleteMe'
let g:UltiSnipsExpandTrigger="<leader><tab>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
" Additional snippets directory
"let g:UltiSnipsSnippetsDir="~/.UltiSnips"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="horizontal"
Plug 'honza/vim-snippets'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic: a syntax checking plugin for Vim that runs files through
" external syntax checkers and displays any resulting errors to the user.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'scrooloose/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs=1
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++14'
let g:syntastic_always_populate_loc_list = 1
if g:isWIN
    let g:syntastic_error_symbol = '×'
    let g:syntastic_warning_symbol = '»'
else
    let g:syntastic_error_symbol = '྾'
    let g:syntastic_warning_symbol = '⚠'
endif
" Default javac checker is too slow!
let g:syntastic_java_checkers=['checkstyle']

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YouCompleteMe
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'Valloric/YouCompleteMe'
" 配置默认的ycm_extra_conf.py
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
" 打开vim时不再询问是否加载ycm_extra_conf.py配置
let g:ycm_confirm_extra_conf = 0
" 注释补全开关
let g:ycm_complete_in_comments = 1
" 字符串补全开关:关闭会导致在包含双引号形式的头文件时无法补全！
let g:ycm_complete_in_strings = 1
" 基于标签收集引擎
let g:ycm_collect_identifiers_from_tags_files = 1
" 基于注释和字符串的收集引擎
let g:ycm_collect_identifiers_from_comments_and_strings = 1
" 语言关键字补全
let g:ycm_seed_identifiers_with_syntax = 1
" 从第n个字符开始展开补全
let g:ycm_min_num_of_chars_for_completion = 1
" 添加UltiSnips进行snippet补全
let g:ycm_use_ultisnips_completer = 1
" 直接显示补全（全局类型、变量、宏或函数等补全需要
let g:ycm_key_invoke_completion = '<C-\>'
" 补全完成后关闭预览窗口
let g:ycm_autoclose_preview_window_after_completion = 1
" Disable completion previews with function prototypes, etc.
set completeopt=menu
let g:ycm_add_preview_tocompleteopt = 1
" 关闭js文件补全（需要js项目配置文件，类似C++，麻烦）
let g:ycm_filetype_specific_completion_to_disable = {'javascript': 1}
"nnoremap <leader>g :YcmCompleter GoTo<CR>
nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Cursor move and incremental search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'easymotion/vim-easymotion'
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)
" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)
" Move to line
map <Leader>l <Plug>(easymotion-bd-jk)
nmap <Leader>l <Plug>(easymotion-overwin-line)
" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)
Plug 'haya14busa/incsearch.vim'
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
Plug 'haya14busa/incsearch-easymotion.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)
" 带跳转标记的跨窗口模糊搜索
function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzyword#converter()],
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction
noremap <silent><expr> <leader>/ incsearch#go(<SID>config_easyfuzzymotion())

" Add plugins to &runtimepath
call plug#end()
