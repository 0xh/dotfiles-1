#=============================================================================
#       Author: Wenxuan Zhang
#        Email: wenxuangm@gmail.com
#     HomePage: wenxuan.info
#=============================================================================

# Plugin manager
installer=https://raw.githubusercontent.com/zplug/installer/master/installer.zsh
zshinit=~/.zplug/init.zsh
# If zplug doesn't exist, install it
source $zshinit &>/dev/null || curl $installer | zsh && source $zshinit

# Git alias. See: https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git
zplug "plugins/git", from:oh-my-zsh
# Git completions. On OS X with Homebrew, you need to install git with brew install git --without-completions. Otherwise, git's _git will take precedence, and you won't see the completions for git-extras commands.
zplug "plugins/git-extras", from:oh-my-zsh
#zplug "plugins/osx", from:oh-my-zsh, if:"[[ $OSTYPE = *darwin* ]]"
zplug "plugins/cp", from:oh-my-zsh
zplug "plugins/mvn", from:oh-my-zsh, lazy:yes
#zplug "plugins/pip", from:oh-my-zsh, lazy:yes # work badly
#zplug "plugins/common-aliases", from:oh-my-zsh, hook-load:"unalias fd"
zplug "plugins/web-search", from:oh-my-zsh
#zplug "plugins/docker", from:oh-my-zsh
#zplug "plugins/tmux", from:oh-my-zsh # Why its folder always appears at top of fzf/fzy list?
zplug "plugins/tmuxinator", from:oh-my-zsh, lazy:yes
zplug "plugins/cargo", from:oh-my-zsh, lazy:yes
zplug "plugins/rust", from:oh-my-zsh, lazy:yes
zplug "plugins/sudo", from:oh-my-zsh
#zplug "lukechilds/zsh-nvm"

zplug "zsh-users/zsh-syntax-highlighting", defer:2
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-autosuggestions"
ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=( forward-word forward-char )
ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=( end-of-line)
zplug "supercrabtree/k"

zplug "morhetz/gruvbox", use:"gruvbox_256palette.sh"
#zplug "morhetz/gruvbox", use:"gruvbox_256palette.sh", if:"[[ $OSTYPE = *linux* ]]"
#zplug "morhetz/gruvbox", use:"gruvbox_256palette_osx.sh", if:"[[ $OSTYPE = *darwin* ]]"
zplug "felixonmars/ydcv", as:command, use:"ydcv.py", rename-to:"ydcv"
#zplug "b4b4r07/zsh-vimode-visual", use:"*.zsh", defer:3
#zplug "b4b4r07/ultimate", as:theme
#zplug "subnixr/minimal", as:theme, use:"minimal.zsh"

################################################################################
# Themes
################################################################################
POWERLEVEL9K_MODE='nerdfont-complete'
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=""
[[ -z $is_server ]] && POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX="  "|| POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX="  "
POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
POWERLEVEL9K_DIR_HOME_BACKGROUND='238'
POWERLEVEL9K_DIR_HOME_FOREGROUND='green'
POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND='238'
POWERLEVEL9K_DIR_HOME_SUBFOLDER_FOREGROUND='green'
POWERLEVEL9K_DIR_DEFAULT_BACKGROUND='238'
POWERLEVEL9K_DIR_DEFAULT_FOREGROUND='yellow'
POWERLEVEL9K_VCS_CLEAN_BACKGROUND='237'
POWERLEVEL9K_VCS_CLEAN_FOREGROUND='green'
POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND='237'
POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND='yellow'
POWERLEVEL9K_VCS_MODIFIED_BACKGROUND='237'
POWERLEVEL9K_VCS_MODIFIED_FOREGROUND='red'
POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND='238'
POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND='green'
POWERLEVEL9K_STATUS_OK_BACKGROUND='237'
POWERLEVEL9K_STATUS_OK_FOREGROUND='green'
POWERLEVEL9K_STATUS_ERROR_BACKGROUND='237'
POWERLEVEL9K_STATUS_ERROR_FOREGROUND='red'
POWERLEVEL9K_CUSTOM_WIFI_SIGNAL_BACKGROUND='236'
POWERLEVEL9K_CUSTOM_WIFI_SIGNAL_FOREGROUND='green'
POWERLEVEL9K_TIME_BACKGROUND='235'
POWERLEVEL9K_TIME_FOREGROUND='green'
POWERLEVEL9K_TIME_FORMAT="%D{%H:%M}"

POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=0.1
POWERLEVEL9K_VCS_GIT_GITHUB_ICON=''
POWERLEVEL9K_EXECUTION_TIME_ICON='' #   

zsh_wifi_signal(){
    local signal=$(nmcli device wifi | grep '*' | tail -1 | awk '{print $7}')
    local color='%F{yellow}'
    [[ $signal -gt 75 ]] && color='%F{green}'
    [[ $signal -lt 50 ]] && color='%F{red}'
    echo -n "%{$color%}\uf012  $signal%{%f%}"
}
if [[ -z $is_server ]]; then
    POWERLEVEL9K_CUSTOM_WIFI_SIGNAL="zsh_wifi_signal"
    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir_writable dir vcs)
    POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status command_execution_time custom_wifi_signal background_jobs time)
else
    POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(ssh host dir_writable dir rbenv vcs)
    POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status command_execution_time background_jobs load time)
fi
zplug "bhilburn/powerlevel9k", use:powerlevel9k.zsh-theme, as:theme

#zplug "mafredri/zsh-async", from:github
#zplug "sindresorhus/pure", use:pure.zsh, from:github, as:theme
#[[ -z $is_server ]] && PURE_PROMPT_SYMBOL=➤ || PURE_PROMPT_SYMBOL=
#[[ -z $is_server ]] && PURE_PROMPT_SYMBOL= || PURE_PROMPT_SYMBOL=
#if zplug check "b4b4r07/ultimate"; then
    #zstyle ':ultimate:prompt:path' mode 'shortpath'
#fi

# wonderful tools for fzf
#zplug 'b4b4r07/fzf-powertools', \
    #as:command, \
    #use:'re'

zplug 'b4b4r07/git-switch', \
    as:command, \
    use:'(*).sh', \
    rename-to:'$1'
export GIT_FILTER=fzf
alias gsw='git switch'

zplug 'so-fancy/diff-so-fancy', as:command, use:diff-so-fancy, hook-build:'git config --global core.pager "diff-so-fancy | less --tabs=4 -RFX"'

zplug 'b4b4r07/zplug-doctor', lazy:yes
zplug 'b4b4r07/zplug-cd', lazy:yes
zplug 'b4b4r07/zplug-rm', lazy:yes

zplug 'wfxr/odps-fzf'
zplug "wfxr/emoji-cli", as:plugin
zplug "wfxr/emoji-cli", as:command, use:'(*).rb', rename-to:'$1'
zplug 'wfxr/pbcopy', as:command, use:'(*).sh', rename-to:'$1'
EMOJI_CLI_KEYBIND='^[m'

# A simple gist editor for CLI
#zplug "b4b4r07/gist", \
    #as:command, \
    #from:gh-r

# jq is a lightweight and flexible command-line JSON processor.
zplug "stedolan/jq", \
    as:command, \
    from:gh-r, \
    rename-to:jq

# A next-generation cd command with an interactive filter
zplug "b4b4r07/enhancd", use:init.sh
ENHANCD_FILTER=fzf:fzy:peco
ENHANCD_DOT_ARG=.
export ENHANCD_FILTER
export ENHANCD_DOT_ARG

# fzy is faster and shows better results than other fuzzy finders.
#zplug "jhawthorn/fzy", \
    #as:command, \
    #hook-build:"make && sudo make install"

# ghr creates GitHub Release and uploads artifacts in parallel.
#zplug "tcnksm/ghr", \
    #as:command, \
    #from:gh-r

# Short, simple, direct scripts for creating ASCII graphical histograms in the terminal.
#zplug "philovivero/distribution", \
    #as:command, \
    #use:distribution, \
    #if:'(( $+commands[perl] ))'

zplug "holman/spark", \
    as:command, \
    use:spark

# httpstat visualizes curl(1) statistics in a way of beauty and clarity.
#zplug "reorx/httpstat", \
    #as:command, \
    #use:'(httpstat).py', \
    #rename-to:'$1', \
    #if:'(( $+commands[python] ))'

# wrk - a HTTP benchmarking tool
# eg: wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html
#zplug "wg/wrk", \
    #as:command, \
    #hook-build:"make -j8"

# An interactive way to peruse your git history from the terminal
#zplug 'Fakerr/git-recall', \
    #as:command, \
    #use:'git-recall'

# Remote repository management made easy
zplug "motemen/ghq", \
    as:command, \
    from:gh-r, \
    rename-to:ghq

zplug "arzzen/calc.plugin.zsh"

# sparklines
# usage: sparklines -n 3 null 3 7 4 2 5 6 | lolcat
#zplug "deeplook/sparklines", hook-build:"sudo pip install -e ."

# gomi is a simple trash tool that works on CLI, written in Go
#zplug "b4b4r07/gomi", as:command, from:gh-r

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    read -q && echo && zplug install
fi

zplug load
#zplug load --verbose
