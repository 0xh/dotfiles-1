ltrim()    { sed 's/^\s\+//g' }
rtrim()    { sed 's/\s\+$//g' }
trim()     { ltrim | rtrim    }
trimtrim() { trim | tr -s ' ' }
alias trimcut='trimtrim | cut -d" "'

# Colors
COLOR_NC='\e[0m' # No Color
COLOR_WHITE='\e[1;37m'
COLOR_BLACK='\e[0;30m'
COLOR_BLUE='\e[0;34m'
COLOR_LIGHT_BLUE='\e[1;34m'
COLOR_GREEN='\e[0;32m'
COLOR_LIGHT_GREEN='\e[1;32m'
COLOR_CYAN='\e[0;36m'
COLOR_LIGHT_CYAN='\e[1;36m'
COLOR_RED='\e[0;31m'
COLOR_LIGHT_RED='\e[1;31m'
COLOR_PURPLE='\e[0;35m'
COLOR_LIGHT_PURPLE='\e[1;35m'
COLOR_BROWN='\e[0;33m'
COLOR_YELLOW='\e[1;33m'
COLOR_GRAY='\e[0;30m'
COLOR_LIGHT_GRAY='\e[0;37m'

# Call default program to open something
xopen() {
    emulate -L zsh
    setopt shwordsplit
    local open
    case "$OSTYPE" in
        (linux*) open='xdg-open'                              ;;
        (darwin*) open='open'                                 ;;
        (cygwin*) open='cygstart'                             ;;
        (msys*) open='start ""'                               ;;
        (*) echo "Platform $OSTYPE not supported" && return 1 ;;
    esac
    # Open as url when directly open failed.
    # Useful when openning urls without 'http://' prefix
    if [[ "$OSTYPE" == darwin* ]]; then
        "$open" "$@" &>/dev/null || "$open" "http://$@" &>/dev/null
    else
        nohup "$open" "$@" &>/dev/null || nohup "$open" "http://$@" &>/dev/null
    fi
}
alias o='xopen'

# remove broken symbolics
wfxr::rm-broken-links() {
    local ls links
    [[ $+commands[exa] ]] && ls=exa || ls=ls
    IFS=$'\n' links=(`eval "find $1 -xtype l"`)
    [[ -z $links ]] && return
    $ls -l --color=always ${links[@]}
    echo -n "Remove? [y/N]: "
    read -q && rm -- ${links[@]}
}
rm-broken-links-all() { wfxr::rm-broken-links               }
rm-broken-links()     { wfxr::rm-broken-links '-maxdepth 1' }

# config for pet
pet-select() {
  BUFFER=$(pet search --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N pet-select
stty -ixon
bindkey '^[s' pet-select

pet-add-prev() {
  PREV=$(fc -lrn | head -n 1)
  sh -c "pet new `printf %q "$PREV"`"
}

# Tmux attach session
ta() {
    [[ $TMUX ]] && return 1 # Already in tmux session
    local preview_cmd='<<< {} awk "{print \$2}" | xargs tmux list-windows -t | sed "s/\[.*\]//g" | column -t | sed "s/  \(\S\)/ \1/g"'
    local choice=$(tmux ls -F "#{session_name}" | nl -w2 -s' ' \
        | fzf +s -e -1 -0 --height=14 \
                          --bind 'alt-t:down' --cycle \
                          --preview="$preview_cmd" \
                          --preview-window=right:60% \
        | awk '{print $2}'
        )
    tmux attach-session -t $choice 2>/dev/null
}
bindkey -s '^[t' 'ta\n'
# Tmux switch session
wfxr::tmux-switch() {
    [[ ! $TMUX ]] && return 1 # Not in tmux session
    local preview_cmd='<<< {} awk "{print \$2}" | xargs tmux list-windows -t | sed "s/\[.*\]//g" | column -t | sed "s/  \(\S\)/ \1/g"'
    local curr=$(tmux display-message -p "#S")
    local choice=$(tmux ls -F "#{session_name}" | grep -v $curr | nl -w2 -s' ' \
        | fzf +s -e -1 -0 --height=14 --header=" * $curr" \
                          --bind 'alt-t:down' --cycle \
                          --preview="$preview_cmd" \
                          --preview-window=right:60% \
        | awk '{print $2}')
    tmux switch-client -t $choice 2>/dev/null

    zle redisplay
}
# Tmux select window
wfxr::tmux-select-window() {
    [[ ! $TMUX ]] && return 1
    local preview_cmd='<<< {} awk "{print \$2}" | xargs tmux list-windows -t | sed "s/\[.*\]//g" | column -t | sed "s/  \(\S\)/ \1/g"'
    local curr=$(tmux display-message -p "#W")
    local choice=$(tmux list-windows -F "#I #W #F" | grep -v '*' | awk '{printf "%2d %s\n", $1, $2}' \
        | fzf +s -e -1 -0 --height=10 --header=" * $curr"\
                          --bind 'alt-w:down' --cycle \
        | awk '{print $1}')
    tmux select-window -t $choice 2>/dev/null
    zle redisplay
}
if [[ $TMUX ]]; then
    zle     -N    wfxr::tmux-switch
    bindkey '^[t' wfxr::tmux-switch
    zle     -N    wfxr::tmux-select-window
    bindkey '^[w' wfxr::tmux-select-window
fi

# Search through your LastPass vault with LastPass CLI and copy password to clipboard.
lppwd() {
    lpass show -c --password $(lpass ls  | fzf | awk '{print $(NF)}' | sed 's/\]//g')
}
lpall() {
    lpass show -c $(lpass ls  | fzf |  awk '{print $(NF)}' | sed 's/\]//g')
}
lproot() {
    lpass show -c --field=Root $(lpass ls | fzf  | awk '{print $(NF)}' | sed 's/\]//g')
}

# Application launcher
fzf-dmenu() {
    # note: xdg-open has a bug with .desktop files, so we cant use that shit
    local selected="$(ls /usr/share/applications | sed 's/\(.*\)\.desktop/\1/g' | fzf -e).desktop"
    [ $? -eq 0 ] && nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
}
# hotkey to run the function (Ctrl+v)
#bindkey -s '^V' "fzf-dmenu\n"

# Powerful fg
fzf-fg() {
    local jobId=$(jobs -l | fzf --exact --exit-0 --select-1 --height=6 | sed "s/^\[\(.*\)\].*$/\1/g")
    # continue only when a jobId selected
    [ $jobId ] && fg %$jobId
}
bindkey -s '^[z' "fzf-fg\n"

autoload -U edit-command-line
zle -N edit-command-line
bindkey '^[v' edit-command-line

# edit
e() {
    local files
    IFS=$'\n' files=($(fzf -q "`echo $@`" -m -1 -0))
    [[ $? -eq 0 ]] && ${EDITOR:-vim} "${files[@]}"
}

# mosh
mosh-kill() {
    ps -C mosh-server -o uname,pid,ppid,start_time,etime --sort=-start_time | column -t \
        | fzf --header-lines=2 -m | awk '{print $2}'\
        | xargs kill -9
}

wfxr::ydcv() {
    WORD=`cat /usr/share/dict/words |\
                fzf --preview='ydcv --color always {}' \
                    --preview-window='right:wrap:80%'`
    BUFFER=$BUFFER$WORD
    CURSOR=$#BUFFER
    zle redisplay
}
zle     -N    wfxr::ydcv
bindkey '^[y' wfxr::ydcv

wfxr::yank() {
  <<< $LBUFFER | pbcopy
  BUFFER=$LBUFFER
  CURSOR=$#BUFFER
  zle redisplay
}
zle     -N   wfxr::yank
bindkey '^Y' wfxr::yank

whichip() {
    curl ip.cn/$1
}
showip() {
    ip addr show | grep 'inet\s\+' | grep -v "127.0.0.1" | trimcut -f2- | column -t
}

# ssh
unalias fssh 2>/dev/null
fssh() {
    [[ $+commands[mosh] ]] && ssh=ssh || ssh=mosh
    [[ -f ~/.ssh/host_info ]] && host=$(column -t ~/.ssh/host_info | fzf --header-lines=1 | cut -d' ' -f1)
    [[ -n $host ]] && $ssh $host
}
bindkey -s '^s' 'fssh\n'
fsshcp() {
    local curr=`showip | tail -1 | cut -d'/' -f1`
    [[ -n $curr  ]] && local hosts=`grep -v '^\s*#' ~/.ssh/host_info | grep -v $curr | fzf -m | awk '{print $1}'`
    [[ -n $hosts ]] && IFS=$'\n' local files=(`fzf -m`)
    [[ -n $files ]] && echo $hosts | xargs -i{} scp ${files[@]} {}:
}
fsshcmd() {
    local curr=`showip | tail -1 | cut -d'/' -f1`
    [[ -n $curr  ]] && local hosts=`grep -v '^\s*#' ~/.ssh/host_info | grep -v $curr | fzf -m | awk '{print $1}'`
    host_count=`wc -l <<< $hosts`
    [[ $host_count -gt 0 ]] && local cmd=(`echo -n |fzf --print-query`)
    [[ -n $cmd   ]] && echo $hosts | xargs -P $host_count -n1 -i{} bash -c "ssh {} $cmd > {}.log"
}
fssh-copy-id() {
    local curr=`showip | tail -1 | cut -d'/' -f1`
    [[ -n $curr  ]] && local hosts=`grep -v '^\s*#' ~/.ssh/host_info | grep -v $curr | fzf -m | awk '{print $1}'`
    [[ -n $hosts ]] && local pub=`ls -d ~/.ssh/* | grep '\/id_.*pub$' | fzf`
    [[ -n $pub    ]] && echo $hosts | xargs -i{} ssh-copy-id -i $pub {}
}

colortest() {
    curl -s 'https://raw.githubusercontent.com/stark/Color-Scripts/master/color-scripts/colortest' | bash
}
colortest2() {
    curl -s 'https://raw.githubusercontent.com/JohnMorales/dotfiles/master/colors/24-bit-color.sh' | bash
}

__unicode_translate() {
    local CODE=$BUFFER[-4,-1]
    [[ ! ${(U)CODE} =~ [0-9A-F]{4} ]] && return
    CHAR=`echo -e "\\u$CODE"`
    BUFFER=$BUFFER[1,-5]$CHAR
    CURSOR=$#BUFFER
    zle redisplay
}
zle -N __unicode_translate
bindkey '^[u' __unicode_translate

unicode-map() {
    ruby -e '0x100.upto(0xFFFF) do |i| puts "%04X%8d%6s" % [i, i, i.chr("UTF-8")] rescue true end' | fzf -m
}

theme-gnome() {
    wget -O gogh https://git.io/vQgMr && chmod +x gogh && ./gogh && rm gogh
}

lswifi() {
    nmcli device wifi
}

lsdelete() {
    lsof -n | grep -i deleted
}

backup-t()  { rename -n 's/^(.*)$/$1.bak/g' $@ }
backup()    { rename    's/^(.*)$/$1.bak/g' $@ }
restore-t() { rename -n 's/^(.*).bak$/$1/g' $@ }
restore()   { rename    's/^(.*).bak$/$1/g' $@ }

# Inline calculator
function = {
    echo "$@" | tr 'x' '*' | bc -l
}

# Maven search
function maven-search {
    xopen "http://mvnrepository.com/search?q="$@
}

# cd downloads quickly
function dwn {
    [[ -d ~/downloads ]] && cd ~/downloads && return
    [[ -d ~/Downloads ]] && cd ~/Downloads && return
    mkdir ~/downloads    && cd ~/downloads && return
}

# cd application quickly
function app {
    [[ -d ~/application ]] || mkdir ~/application
    cd ~/application
}

function frds() {
    # eg:
    # vpc-dmp-log rm-2ze8wqw9hu4o264f7.mysql.rds.aliyuncs.com:3306 30001 wenxuan@wfxr test,prod,wenxuan
    local item=($(column -t ~/.ssh/rds_tunnel_list | fzf --header-lines=1))
    url=$item[2]
    port=$item[3]
    proxy=$item[4]
    users=(${(@s/,/)item[5]})
    [[ -n $port ]] && user=$(echo ${(j:\n:)users} | fzf --prompt="User: ")
    [[ -n $user ]] || return
    fuser $port/tcp &>/dev/null || ssh -fCNL $port:$url $proxy
    mycli -P $port -u $user
}

# csv viewer
function csvcat() {
    csvlook "$@" | less -SF
}

# ghq
unalias gcd 2>/dev/null
function gcd() {
    (( $+commands[exa] )) && ll='exa -lbhg --git --time-style long-iso --color=always' || ll='ls -l --time-style long-iso --color=always'
    root=$(ghq root)
    repo=$(ghq list| fzf --preview="$ll $root/{}" --preview-window=right:60%)
    [[ -n "$repo" ]] && cd "$(ghq root)/$repo"
}

unalias xx &>/dev/null
function xx() {
    (start_proxy && "$@")
}

function ghr-get() {
    local url=$(__zplug::utils::releases::get_url "$@" 2>/dev/null || echo "$@: no release found" >&2)
    [[ -n "$url" ]] || return 1
    echo "Latest release found: $url\n"

    curl -LO --proto-redir -all,https "$url"
}

unalias mcd &>/dev/null
function mcd() {
    mkdir -p -v "$1" && cd "$1" && echo "cd into '$1'"
}

unalias uppercase &>/dev/null
function uppercase() {
    tr '[:lower:]' '[:upper:]'
}
unalias lowercase &>/dev/null
function lowercase() {
    tr '[:upper:]' '[:lower:]'
}

(( $+commands[numfmt] )) || alias numfmt=gnumfmt
unalias num &>/dev/null
function num() {
    if [[ $# -eq 0 ]]; then
        tr '[:lower:]' '[:upper:]' | numfmt --from iec
    else
        numfmt --from iec "${(U)@}"
    fi
}

unalias fnum &>/dev/null
function fnum() {
    if [[ $# -eq 0 ]]; then
        numfmt --to iec
    else
        numfmt --to iec "${@}"
    fi
}

unalias color_cat &>/dev/null
function color_cat() {
    s="\e[38;5;${1}m$2"
    echo -E "$s"
    echo -e "$s"
}

unalias xgh &>/dev/null
function xgh() {
    xopen "https://github.com/${(j:/:)@}"
}

jqq() {
    [[ "$#" -eq 0 ]] && args='.' || args="$@"
    # -F tell less exit automatically if output content can be displayed on one screen
    jq -C $args | less -FR
}

diffdays() {
    d1=$(date -d "$1" +%s)
    d2=$(date -d "$2" +%s)
    echo $(( (d1 - d2) / 86400 ))
}

rolling-times() {
    local beg="$(date -I -d "$(head -n1 /var/log/pacman.log | grep -Po '(?<=^\[).*?(?=\])')")"
    local now="$(date -I)"
    echo "rolling $COLOR_LIGHT_BLUE$(diffdays "$now" "$beg")$COLOR_NC days, from $beg to $now."
    echo -n "full system upgrade $COLOR_GREEN$(grep -c "full system upgrade" /var/log/pacman.log)$COLOR_NC times, "
    echo "install package $COLOR_GREEN$(grep -c " installed " /var/log/pacman.log)$COLOR_NC times."
}

dequote() {
    sed 's/\\"/"/g; s/^"\|"$//g'
}

vcurl() {
    local TMPFILE="$(mktemp -t --suffix=.json)"
    trap "\\rm -f '$TMPFILE'" EXIT INT TERM HUP
    vim "$TMPFILE" >/dev/tty
    curl "$@" < "$TMPFILE"
}

kcurl() {
    local BUFFER="/tmp/curl-body-buffer.json"
    touch "$BUFFER" && vim "$BUFFER" >/dev/tty
    curl "$@" < "$BUFFER"
}

escli() {
    local route="$@[-1]"
    local args=$@[1,-2]
    case "$route" in
        _cat* | _nodes* | _cluster* )
            http --body -a "$USER" "$@[1,-2]" "$ES_API_HOST/$route"
            ;;
        * )
            local BUFFER="/tmp/curl-body-buffer.esquery.json"
            touch "$BUFFER" && vim "$BUFFER" >/dev/tty
            http --body -a "$USER" "$@[1,-2]" "$ES_API_HOST/$route" @"$BUFFER"
            ;;
    esac
}

gorepo() {
    local url
    url=$(git remote get-url origin) || return $?
    [[ "$url" =~ '^git@' ]] && url=$(echo "$url" | sed -e 's#:#/#' -e 's#git@#https://#')
    xopen "$url"
}
