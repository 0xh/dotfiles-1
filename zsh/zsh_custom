ltrim()    { sed 's/^\s\+//g' }
rtrim()    { sed 's/\s\+$//g' }
trim()     { ltrim | rtrim    }
trimtrim() { trim | tr -s ' ' }
alias trimcut='trimtrim | cut -d" "'

# remove broken symbolics
wfxr::rm-broken-links() {
    local ls links
    [[ $+commands[exa] ]] && ls=exa || ls=ls
    IFS=$'\n' links=(`eval "find $1 -xtype l"`)
    [[ -z $links ]] && return
    $ls -l --color=always ${links[@]}
    echo -n "Remove? [y/N]: "
    read -q && rm -- ${links[@]}
}
rm-broken-links-all() { wfxr::rm-broken-links               }
rm-broken-links()     { wfxr::rm-broken-links '-maxdepth 1' }

# config for pet
pet-select() {
  BUFFER=$(pet search --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N pet-select
stty -ixon
bindkey '^[s' pet-select

pet-add-prev() {
  PREV=$(fc -lrn | head -n 1)
  sh -c "pet new `printf %q "$PREV"`"
}

# Tmux attach session
ta() {
    [[ $TMUX ]] && return 1 # Already in tmux session
    local preview_cmd='<<< {} awk "{print \$2}" | xargs tmux list-windows -t | sed "s/\[.*\]//g" | column -t | sed "s/  \(\S\)/ \1/g"'
    local choice=$(tmux ls -F "#{session_name}" | nl -w2 -s' ' \
        | fzf +s -e -1 -0 --height=14 \
                          --bind 'alt-t:down' --cycle \
                          --preview="$preview_cmd" \
                          --preview-window=right:60% \
        | awk '{print $2}'
        )
    tmux attach-session -t $choice 2>/dev/null
}
bindkey -s '^[t' 'ta\n'
# Tmux switch session
wfxr::tmux-switch() {
    [[ ! $TMUX ]] && return 1 # Not in tmux session
    local preview_cmd='<<< {} awk "{print \$2}" | xargs tmux list-windows -t | sed "s/\[.*\]//g" | column -t | sed "s/  \(\S\)/ \1/g"'
    local curr=$(tmux display-message -p "#S")
    local choice=$(tmux ls -F "#{session_name}" | grep -v $curr | nl -w2 -s' ' \
        | fzf +s -e -1 -0 --height=14 --header=" * $curr" \
                          --bind 'alt-t:down' --cycle \
                          --preview="$preview_cmd" \
                          --preview-window=right:60% \
        | awk '{print $2}')
    tmux switch-client -t $choice 2>/dev/null

    zle redisplay
}
# Tmux select window
wfxr::tmux-select-window() {
    [[ ! $TMUX ]] && return 1
    local preview_cmd='<<< {} awk "{print \$2}" | xargs tmux list-windows -t | sed "s/\[.*\]//g" | column -t | sed "s/  \(\S\)/ \1/g"'
    local curr=$(tmux display-message -p "#W")
    local choice=$(tmux list-windows -F "#I #W #F" | grep -v '*' | awk '{printf "%2d %s\n", $1, $2}' \
        | fzf +s -e -1 -0 --height=10 --header=" * $curr"\
                          --bind 'alt-w:down' --cycle \
        | awk '{print $1}')
    tmux select-window -t $choice 2>/dev/null
    zle redisplay
}
if [[ $TMUX ]]; then
    zle     -N    wfxr::tmux-switch
    bindkey '^[t' wfxr::tmux-switch
    zle     -N    wfxr::tmux-select-window
    bindkey '^[w' wfxr::tmux-select-window
fi

(( $+commands[diff-so-fancy] )) && fancy='|diff-so-fancy'
(( $+commands[emojify] )) && emojify='|emojify'
# git commit browser
unalias glo 2>/dev/null
glo() {
    git rev-parse --is-inside-work-tree 1>/dev/null
    [ $? -ne 0 ] && return 1
    # diff is fancy with diff-so-fancy!
    local cmd="<<< {} grep -o '[a-f0-9]\{7\}' | head -1 | xargs -i% git show --color=always % $emojify $fancy"
    eval "git log --graph --color=always --format='%C(auto)%h%d %s %C(black)%C(bold)%cr' $@ $emojify" \
        | fzf -e +s --tiebreak=index \
                    --bind="enter:execute($cmd | less -R)" \
                    --preview="$cmd" \
                    --preview-window="right:60%"
}
unalias gd 2>/dev/null
gd() {
    local cmd="git diff --color=always -- {} $emojify $fancy"
    git ls-files --modified \
        | fzf -e -0 --bind="enter:execute($cmd | less -R)" \
                    --preview="$cmd" \
                    --preview-window="right:60%"
}
unalias ga 2>/dev/null
ga() {
    original=$(git config color.status)
    git config color.status always
    IFS=$'\n' local files=`git status --short \
        | grep 31m | awk '{printf "[%10s]  ", $1; $1=""; print $0 }' | sort \
        | fzf -e -0 -m \
            --preview="echo {} | cut -d] -f2 | xargs git diff --color=always -- $emojify $fancy" \
            --preview-window="right:60%" \
        | cut -d] -f2`
    [[ -n $files ]] && echo $files | xargs -i{} git add {} && git status
    git config color.status $original
}

# Search through your LastPass vault with LastPass CLI and copy password to clipboard.
lppwd() {
    lpass show -c --password $(lpass ls  | fzf | awk '{print $(NF)}' | sed 's/\]//g')
}
lpall() {
    lpass show -c $(lpass ls  | fzf |  awk '{print $(NF)}' | sed 's/\]//g')
}
lproot() {
    lpass show -c --field=Root $(lpass ls | fzf  | awk '{print $(NF)}' | sed 's/\]//g')
}

# Application launcher
fzf-dmenu() {
    # note: xdg-open has a bug with .desktop files, so we cant use that shit
    local selected="$(ls /usr/share/applications | sed 's/\(.*\)\.desktop/\1/g' | fzf -e).desktop"
    [ $? -eq 0 ] && nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
}
# hotkey to run the function (Ctrl+v)
bindkey -s '^V' "fzf-dmenu\n"

# Powerful fg
fzf-fg() {
    local jobId=$(jobs -l | fzf --exact --exit-0 --select-1 --height=6 | sed "s/^\[\(.*\)\].*$/\1/g")
    # continue only when a jobId selected
    [ $jobId ] && fg %$jobId
}
bindkey -s '^[z' "fzf-fg\n"

# git ignore
gi() {
    if [ $# -eq 0 ]; then
        [ -f ~/.gilist ] || gi-update
        cat ~/.gilist | fzf -m | paste -sd ',' | xargs -i{} curl -sL https://www.gitignore.io/api/{}
    else
        curl -sL https://www.gitignore.io/api/${(j:,:)@}
    fi
}
gi-update() {
    curl -sL https://www.gitignore.io/api/list | tr ',' '\n' > ~/.gilist
}

autoload -U edit-command-line
zle -N edit-command-line
bindkey '^[v' edit-command-line

# edit
e() {
    local files
    IFS=$'\n' files=($(fzf -q "`echo $@`" -m -1 -0))
    #echo $?
    ([ $? -eq 0 ] || [ $? -eq 1]) && ${EDITOR:-vim} "${files[@]}"
}

# mosh
mosh-kill() {
    ps -C mosh-server -o uname,pid,ppid,start_time,etime --sort=-start_time | column -t \
        | fzf --header-lines=2 -m | awk '{print $2}'\
        | xargs kill -9
}

wfxr::ydcv() {
    WORD=`cat /usr/share/dict/words |\
                fzf --preview='ydcv --color always {}' \
                    --preview-window='right:wrap:80%'`
    BUFFER=$BUFFER$WORD
    CURSOR=$#BUFFER
    zle redisplay
}
zle     -N    wfxr::ydcv
bindkey '^[y' wfxr::ydcv

wfxr::yank() {
  <<< $LBUFFER | pbcopy
  BUFFER=$LBUFFER
  CURSOR=$#BUFFER
  zle redisplay
}
zle     -N   wfxr::yank
bindkey '^Y' wfxr::yank

show_ip() {
    ip addr show | grep 'inet\s\+' | grep -v "127.0.0.1" | trimcut -f2- | column -t
}

# ssh
unalias fssh 2>/dev/null
fssh() {
    [[ $+commands[mosh] ]] && ssh=ssh || ssh=mosh
    [[ -f ~/.ssh/host_info ]] && host=$(column -t ~/.ssh/host_info | fzf --header-lines=1 | cut -d' ' -f1)
    [[ -n $host ]] && $ssh $host
}
bindkey -s '^s' 'fssh\n'
fsshcp() {
    local curr=`show_ip | tail -1 | cut -d'/' -f1`
    [[ -n $curr  ]] && local hosts=`grep -v '^\s*#' ~/.ssh/host_info | grep -v $curr | fzf -m | awk '{print $1}'`
    [[ -n $hosts ]] && IFS=$'\n' local files=(`fzf -m`)
    [[ -n $files ]] && echo $hosts | xargs -i{} scp ${files[@]} {}:
}
fsshcmd() {
    local curr=`show_ip | tail -1 | cut -d'/' -f1`
    [[ -n $curr  ]] && local hosts=`grep -v '^\s*#' ~/.ssh/host_info | grep -v $curr | fzf -m | awk '{print $1}'`
    host_count=`wc -l <<< $hosts`
    [[ $host_count -gt 0 ]] && local cmd=(`echo -n |fzf --print-query`)
    [[ -n $cmd   ]] && echo $hosts | xargs -P $host_count -n1 -i{} bash -c "ssh {} $cmd > {}.log"
}

color-test() {
    curl -s https://raw.githubusercontent.com/JohnMorales/dotfiles/master/colors/24-bit-color.sh | bash
}

__unicode_translate() {
    local CODE=$BUFFER[-4,-1]
    [[ ! ${(U)CODE} =~ [0-9A-F]{4} ]] && return
    CHAR=`echo -e "\\u$CODE"`
    BUFFER=$BUFFER[1,-5]$CHAR
    CURSOR=$#BUFFER
    zle redisplay
}
zle -N __unicode_translate
bindkey '^[u' __unicode_translate

unicode-map() {
    ruby -e '0x100.upto(0xFFFF) do |i| puts "%04X%8d%6s" % [i, i, i.chr("UTF-8")] rescue true end' | fzf -m
}

theme-gnome() {
    wget -O gogh https://git.io/vQgMr && chmod +x gogh && ./gogh && rm gogh
}

lswifi() {
    nmcli device wifi
}

fuck () {
    TF_PREVIOUS=$(fc -ln -1 | tail -n 1);
    TF_CMD=$(
    TF_ALIAS=fuck
    TF_SHELL_ALIASES=$(alias)
    PYTHONIOENCODING=utf-8
    thefuck $TF_PREVIOUS THEFUCK_ARGUMENT_PLACEHOLDER $*
    ) && eval $TF_CMD;
    test -n "$TF_CMD" && print -s $TF_CMD
}
