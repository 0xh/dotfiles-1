trim () {
    sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//'
}

# remove broken symbolics
function rm-broken-links() {
    rm -- *(-@D)
}

# config for pet
function pet-select() {
  BUFFER=$(pet search --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N pet-select
stty -ixon
bindkey '^s' pet-select

function pet-prev() {
  PREV=$(fc -lrn | head -n 1)
  sh -c "pet new `printf %q "$PREV"`"
}

# Tmux attach session
ta() {
    [[ $TMUX ]] && return 1 # Already in tmux session
    local preview_cmd='<<< {} awk "{print \$2}" | xargs tmux list-windows -t | sed "s/\[.*\]//g" | column -t | sed "s/  \(\S\)/ \1/g"'
    local choice=$(tmux ls -F "#{session_name}" | nl -w2 -s' ' \
        | fzf +s -e -1 -0 --height=14 \
                          --bind 'alt-t:down' --cycle \
                          --preview="$preview_cmd" \
                          --preview-window=right:60% \
        | awk '{print $2}'
        )
    tmux attach-session -t $choice 2>/dev/null
}
bindkey -s '^[t' 'ta\n'
# Tmux switch session
__ts() {
    [[ ! $TMUX ]] && return 1 # Not in tmux session
    local preview_cmd='<<< {} awk "{print \$2}" | xargs tmux list-windows -t | sed "s/\[.*\]//g" | column -t | sed "s/  \(\S\)/ \1/g"'
    local curr=$(tmux display-message -p "#S")
    local choice=$(tmux ls -F "#{session_name}" | grep -v $curr | nl -w2 -s' ' \
        | fzf +s -e -1 -0 --height=14 --header=" * $curr" \
                          --bind 'alt-t:down' --cycle \
                          --preview="$preview_cmd" \
                          --preview-window=right:60% \
        | awk '{print $2}')
    tmux switch-client -t $choice 2>/dev/null

    zle redisplay
    typeset -f zle-line-init >/dev/null && zle zle-line-init
}
zle -N __ts
[[ $TMUX ]] && bindkey '^[t' __ts
# Tmux select window
tw() {
    [[ ! $TMUX ]] && return 1
    local preview_cmd='<<< {} awk "{print \$2}" | xargs tmux list-windows -t | sed "s/\[.*\]//g" | column -t | sed "s/  \(\S\)/ \1/g"'
    local curr=$(tmux display-message -p "#W")
    local choice=$(tmux list-windows -F "#I #W #F" | grep -v '*' | awk '{printf "%2d %s\n", $1, $2}' \
        | fzf +s -e -1 -0 --height=10 --header=" * $curr"\
                          --bind 'alt-w:down' --cycle \
        | awk '{print $1}')
    tmux select-window -t $choice 2>/dev/null
    zle redisplay
    typeset -f zle-line-init >/dev/null && zle zle-line-init
}
zle -N tw
bindkey '^[w' tw

# v - open files in ~/.viminfo
#v() {
    #local files
    #files=$(grep '^>' ~/.viminfo | cut -c3- |
    #while read line; do
        #[ -f "${line/\~/$HOME}" ] && echo "$line"
    #done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
#}

(( $+commands[diff-so-fancy] )) && fancy=' | diff-so-fancy'
# git commit browser
unalias glo 2>/dev/null
glo() {
    git rev-parse --is-inside-work-tree 1>/dev/null
    [ $? -ne 0 ] && return 1
    # diff is fancy with diff-so-fancy!
    local cmd="<<< {} grep -o '[a-f0-9]\{7\}' | head -1 | xargs -i% git show --color=always % $fancy"
    git log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" \
        | fzf -e +s --tiebreak=index \
                    --bind="enter:execute($cmd | less -R)" \
                    --preview="$cmd" \
                    --preview-window="right:60%"
}
unalias gd 2>/dev/null
gd() {
    local cmd="git diff --color=always -- {} $fancy"
    git ls-files --modified \
        | fzf -e -0 --bind="enter:execute($cmd | less -R)" \
                    --preview="$cmd" \
                    --preview-window="right:60%"
}
unalias ga 2>/dev/null
ga() {
    git status --short \
        | sed 's/^\(\S\+\)??\(\S\+\)/ \1U\2/g' | grep '^ ' | awk '$1="["$1"]"' | sort \
        | fzf -e -0 -m \
            --preview="<<< {} awk '{print \$2}' | xargs git diff --color=always -- $fancy" \
            --preview-window="right:60%" \
        | awk '{print $2}' \
        | xargs -i{} git add {}
}

# Search through your LastPass vault with LastPass CLI and copy password to clipboard.
lppwd() {
    lpass show -c --password $(lpass ls  | fzf | awk '{print $(NF)}' | sed 's/\]//g')
}
lpall() {
    lpass show -c $(lpass ls  | fzf |  awk '{print $(NF)}' | sed 's/\]//g')
}
lproot() {
    lpass show -c --field=Root $(lpass ls | fzf  | awk '{print $(NF)}' | sed 's/\]//g')
}

# Application launcher
fzf-dmenu() {
    # note: xdg-open has a bug with .desktop files, so we cant use that shit
    local selected="$(ls /usr/share/applications | sed 's/\(.*\)\.desktop/\1/g' | fzf -e).desktop"
    [ $? -eq 0 ] && nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
}
# hotkey to run the function (Ctrl+v)
bindkey -s '^V' "fzf-dmenu\n"

# Powerful fg
fzf-fg() {
    local jobId=$(jobs -l | fzf --exact --exit-0 --select-1 --height=6 | sed "s/^\[\(.*\)\].*$/\1/g")
    # continue only when a jobId selected
    [ $jobId ] && fg %$jobId
}
bindkey -s '^Y' "fzf-fg\n"

# git ignore
function gi() {
    if [ $# -eq 0 ]; then
        [ -f ~/.gilist ] || gi-update
        cat ~/.gilist | fzf -m | paste -sd ',' | xargs -i{} curl -sL https://www.gitignore.io/api/{}
    else
        curl -sL https://www.gitignore.io/api/${(j:,:)@}
    fi
}
function gi-update() {
    curl -sL https://www.gitignore.io/api/list | tr ',' '\n' > ~/.gilist
}

autoload -U edit-command-line
zle -N edit-command-line
bindkey '^[v' edit-command-line

# ssh
unalias fssh 2>/dev/null
function fssh() {
    [[ $+commands[mosh] ]] && ssh=ssh || ssh=mosh
    [[ -f ~/.ssh/host_info ]] && host=$(column -t ~/.ssh/host_info | fzf --header-lines=1 | cut -d' ' -f1)
    [[ -n $host ]] && $ssh $host
}
bindkey -s '^[s' 'fssh\n'

# edit
e() {
    local files
    IFS=$'\n' files=($(fzf -q "`echo $@`" -m -1 -0))
    [[ -n $files ]] && ${EDITOR:-vim} "${files[@]}"
}

# mosh
mosh-kill() {
    ps -C mosh-server -o uname,pid,ppid,start_time,etime --sort=-start_time | column -t \
        | fzf --header-lines=2 | awk '{print $2}'\
        | xargs kill -9
}

yd() {
    </usr/share/dict/words fzf --print-query --preview='ydcv --color always {}' --preview-window='right:wrap:80%' | head -1 | xargs -i{} ydcv {}
    zle redisplay
    typeset -f zle-line-init >/dev/null && zle zle-line-init
}
zle -N yd
bindkey '^[y' yd

#  TODO: Add pbcopy plugin <17-08-16, wenxuan> #
__yank() {
  <<< $LBUFFER | pbcopy
  BUFFER=$LBUFFER
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N __yank
bindkey '^Y' __yank
