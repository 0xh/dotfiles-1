trim () {
    sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//'
}

# remove broken symbolics
function rm-broken-links() {
    rm -- *(-@D)
}

# config for pet
function pet-select() {
  BUFFER=$(pet search --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N pet-select
stty -ixon
bindkey '^s' pet-select

function pet-prev() {
  PREV=$(fc -lrn | head -n 1)
  sh -c "pet new `printf %q "$PREV"`"
}

# Powerful tmux
ts() {
    if [[ $TMUX ]]; then
        curr=$(tmux display-message -p "#S")
        choice=$(tmux ls -F "#{session_name}" | grep -v $curr | sed 's/^/ /g' \
            | fzf +s -e -1 -0 --height=10 --header="*$curr" | sed 's/^ //g')
        tmux switch-client -t $choice 2>/dev/null
    else
        choice=$(tmux ls -F "#{session_name}" \
            | fzf +s -e -1 -0  --height=10)
        tmux attach-session -t $choice 2>/dev/null
    fi
}
bindkey -s '^[t' 'ts\n'
tw() {
    [[ ! $TMUX ]] && return 1
    #curr=$(tmux display-message -p "#W")
    choice=$(tmux list-windows -F "#I #W #F" | grep -v '*' |\
        fzf +s -e --height=10 --select-1 --exit-0 | cut -d' ' -f1)
    tmux select-window -t $choice 2>/dev/null
}
bindkey -s '^[w' 'tw\n'
td() {
    [[ $TMUX ]] && tmux detach
}

alias tn='tmux new-session -s'

# v - open files in ~/.viminfo
#v() {
    #local files
    #files=$(grep '^>' ~/.viminfo | cut -c3- |
    #while read line; do
        #[ -f "${line/\~/$HOME}" ] && echo "$line"
    #done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
#}

(( $+commands[diff-so-fancy] )) && fancy=' | diff-so-fancy'
# git commit browser
unalias glo 2>/dev/null
glo() {
    git rev-parse --is-inside-work-tree 1>/dev/null
    [ $? -ne 0 ] && return 1
    # diff is fancy with diff-so-fancy!
    cmd="<<< {} grep -o '[a-f0-9]\{7\}' | head -1 | xargs -i% git show --color=always % $fancy"
    git log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" \
        | fzf -e +s --tiebreak=index \
                    --bind="enter:execute($cmd | less -R)" \
                    --preview="$cmd" \
                    --preview-window="right:60%"
}
unalias gd 2>/dev/null
gd() {
    cmd="git diff --color=always -- {} $fancy"
    git ls-files --modified \
        | fzf -e -0 --bind="enter:execute($cmd | less -R)" \
                    --preview="$cmd" \
                    --preview-window="right:60%"
}
unalias ga 2>/dev/null
ga() {
    git status --short \
        | sed 's/^\(\S\+\)??\(\S\+\)/ \1U\2/g' | grep '^ ' | awk '$1="["$1"]"' \
        | sort \
        | fzf -e -0 -m \
                --preview='echo {} | awk "{print $2}" | xargs git diff --color=always -- $fancy' \
                --preview-window="right:60%" \
        | awk '{print $2}' \
        | xargs -i{} git add {}
}

# Search through your LastPass vault with LastPass CLI and copy password to clipboard.
lppwd() {
    lpass show -c --password $(lpass ls  | fzf | awk '{print $(NF)}' | sed 's/\]//g')
}
lpall() {
    lpass show -c $(lpass ls  | fzf |  awk '{print $(NF)}' | sed 's/\]//g')
}
lproot() {
    lpass show -c --field=Root $(lpass ls | fzf  | awk '{print $(NF)}' | sed 's/\]//g')
}

# Application launcher
fzf-dmenu() {
    # note: xdg-open has a bug with .desktop files, so we cant use that shit
    selected="$(ls /usr/share/applications | sed 's/\(.*\)\.desktop/\1/g' | fzf -e).desktop"
    [ $? -eq 0 ] && nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
}
# hotkey to run the function (Ctrl+v)
bindkey -s '^V' "fzf-dmenu\n"

# Powerful fg
fzf-fg() {
    jobId=$(jobs -l | fzf --exact --exit-0 --select-1 --height=6 | sed "s/^\[\(.*\)\].*$/\1/g")
    # continue only when a jobId selected
    [ $jobId ] && fg %$jobId
}
bindkey -s '^Y' "fzf-fg\n"

# git ignore
function gi() {
    if [ $# -eq 0 ]; then
        [ -f ~/.gilist ] || gi-update
        cat ~/.gilist | fzf -m | paste -sd ',' | xargs -i{} curl -sL https://www.gitignore.io/api/{}
    else
        curl -sL https://www.gitignore.io/api/${(j:,:)@}
    fi
}
function gi-update() {
    curl -sL https://www.gitignore.io/api/list | tr ',' '\n' > ~/.gilist
}

autoload -U edit-command-line
zle -N edit-command-line
bindkey '^[v' edit-command-line
