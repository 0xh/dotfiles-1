# remove broken symbolics
function rm-broken-links() {
    rm -- *(-@D)
}

# config for pet
function pet-select() {
  BUFFER=$(pet search --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N pet-select
stty -ixon
bindkey '^s' pet-select

function pet-prev() {
  PREV=$(fc -lrn | head -n 1)
  sh -c "pet new `printf %q "$PREV"`"
}

# Powerful tmux
t() {
    if [[ $TMUX ]]; then
        curr=$(tmux display-message -p "#S")
        choice=$(tmux ls -F "#{session_name}" | ag -v $curr | sed 's/^/ /g' |\
            fzf +s -e --height=10 --select-1 --exit-0 --header="*$curr" | sed 's/^ //g')
        tmux switch-client -t $choice 2> /dev/null
    else
        choice=$(tmux ls -F "#{session_name}" |\
            fzf +s -e --height=10 --select-1 --exit-0)
        tmux attach-session -t $choice 2> /dev/null
    fi
}
tw() {
    [[ ! $TMUX ]] && return 1
    #curr=$(tmux display-message -p "#W")
    choice=$(tmux list-windows -F "#I #W #F" | grep -v '*' |\
        fzf +s -e --height=10 --select-1 --exit-0 | cut -d' ' -f1)
    tmux select-window -t $choice 2> /dev/null
}
bindkey -s '^o' 'tw\n'
td() {
    [[ $TMUX ]] && tmux detach
}

alias tn='tmux new-session -s'

# v - open files in ~/.viminfo
#v() {
    #local files
    #files=$(grep '^>' ~/.viminfo | cut -c3- |
    #while read line; do
        #[ -f "${line/\~/$HOME}" ] && echo "$line"
    #done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
#}

# git commit browser
unalias glo 2>/dev/null
glo() {
    git rev-parse --is-inside-work-tree 1>/dev/null
    [ $? -ne 0 ] && return 1
    # DON'T join the lines!
    cmd="(grep -o '[a-f0-9]\{7\}' | head -1 | xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
            {} FZF-EOF"
    git log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |\
        fzf --ansi --no-sort -e --tiebreak=index --bind=ctrl-s:toggle-sort \
            --bind "ctrl-m:execute: $cmd" \
            --preview "$cmd" \
            --preview-window=right
}

# Search through your LastPass vault with LastPass CLI and copy password to clipboard.
lppwd() {
    lpass show -c --password $(lpass ls  | fzf | awk '{print $(NF)}' | sed 's/\]//g')
}
lpall() {
    lpass show -c $(lpass ls  | fzf |  awk '{print $(NF)}' | sed 's/\]//g')
}
lproot() {
    lpass show -c --field=Root $(lpass ls | fzf  | awk '{print $(NF)}' | sed 's/\]//g')
}

# Application launcher
fzf-dmenu() {
    # note: xdg-open has a bug with .desktop files, so we cant use that shit
    selected="$(ls /usr/share/applications | sed 's/\(.*\)\.desktop/\1/g' | fzf -e).desktop"
    [ $? -eq 0 ] && nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
}
# hotkey to run the function (Ctrl+;)
bindkey -s '^V' "fzf-dmenu\n"

# Powerful fg
fzf-fg() {
    jobId=$(jobs -l | fzf --exact --exit-0 --select-1 --height=6 | sed "s/^\[\(.*\)\].*$/\1/g")
    # continue only when a jobId selected
    [ $jobId ] && fg %$jobId
}
bindkey -s '^Y' "fzf-fg\n"

# git ignore
function gi() {
    if [ $# -eq 0 ]; then
        [ -f ~/.gilist ] || gi-update
        chosen=`cat ~/.gilist | fzf | tr '\n' ','`
        curl -sL https://www.gitignore.io/api/$chosen
    else
        curl -sL https://www.gitignore.io/api/${(j:,:)@}
    fi
}
function gi-update() {
    curl -sL https://www.gitignore.io/api/list | tr ',' '\n' > ~/.gilist
}

# odps
function ocmd() {
    [ $# -lt 1 ] && return 1
    [ $# -gt 1 ] && args=${@:2} || args='{}'
    echo $args | xargs -i{} odpscmd -e "$1" 2>/tmp/ocmd.stderr | grep .
}
function oupdate() {
    ocmd 'show tables' | grep . | cut -d : -f 2 > ~/.odps-tables
}
function otable() {
    ([ -f ~/.odps-tables ] || oupdate) && fzf < ~/.odps-tables
}
function opeek() {
    [ $# -eq 0 ] && args=`otable` || args=$@
    ocmd 'select * from {} limit 10' $args
}
function odesc() {
    [ $# -eq 0 ] && args=`otable` || args=$@
    ocmd "desc {}" $args
}
function ocount() {
    [ $# -eq 0 ] && args=`otable` || args=$@
    ocmd 'count {}' $args
}
function ofields() {
    [ $# -eq 0 ] && args=`otable` || args=$@
    odesc $args | sed -e '1,/Field/d' -e '/+/d' | tr '|' ' ' | grep .
}
function odownload() {
    table=`otable`
    [ $? -ne 0 ] && return -1
    fields=`ofields $table | fzf --header='Fields to download:' | awk '{print $1}' 2>/dev/null`
    [ $? -ne 0 ] && return -1
    postfix_list=(.`date +%F` .`date +%F.%T` .`date +%s` .txt .data .dat .csv)
    postfix=`echo ${(j:\n:)postfix_list} | fzf --header='Choose a postfix:'`
    [ $? -ne 0 ] && return -1
    threads=`seq 1 16 | fzf --header='Threads count:'`
    [ $? -ne 0 ] && return -1
    odpscmd -e "tunnel download ${table} ${table}${postfix} -cn ${fields} -threads ${threads}"
}
